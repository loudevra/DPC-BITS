<Application x:Class="Application"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:DPC.DPC.Data.Converters"
    xmlns:local2="clr-namespace:DPC.DPC.Data.Converters.ValueConverter"
    StartupUri="SplashScreen.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/Generic.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- Value Converters -->
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <local:InverseBooleanToVisibilityConverter x:Key="BooleanToVisibilityConverterInverted"/>

            <!-- Font Definitions -->
            <FontFamily x:Key="Lexend">pack://application:,,,/Assets/fonts/Lexend/Lexend-Regular.ttf</FontFamily>
            
            <!-- Styles -->
            <Style x:Key="TextBlockStyle" TargetType="TextBlock">
                <Setter Property="FontFamily" Value="{StaticResource Lexend}" />
            </Style>
            <Style x:Key="TextBoxStyle" TargetType="TextBox">
                <Setter Property="FontFamily" Value="{StaticResource Lexend}" />
            </Style>
            <Style x:Key="ButtonStyle" TargetType="Button">
                <Setter Property="FontFamily" Value="{StaticResource Lexend}" />
            </Style>

            <Style x:Key="IconButton" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Padding" Value="8"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="4">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Rounded Borders for texboxes-->
            <Style x:Key="RoundedBorderStyle" TargetType="Border">
                <Setter Property="CornerRadius" Value="20"/>
                <Setter Property="BorderBrush" Value="#474747"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="Background" Value="White"/>
            </Style>

            <!-- rounded texboxes-->
            <Style x:Key="RoundedTextboxStyle" TargetType="TextBox">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Margin" Value="20,0"/>
            </Style>

            <!-- Custom ComboBox Toggle Button -->
            <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border Background="Transparent" Padding="5">
                                <Grid>
                                    <Path x:Name="Arrow" Data="M 0 0 L 4 4 L 8 0 Z"
                              HorizontalAlignment="Right" VerticalAlignment="Center"
                              Fill="Black" Width="8" Height="8" 
                              Margin="0,5,10,0"/>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Custom ComboBox Style with No Hover Effect and Scrollable Dropdown -->
            <Style x:Key="RoundedComboBoxStyle" TargetType="ComboBox">
                <Setter Property="FontFamily" Value="{StaticResource Lexend}"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Foreground" Value="#474747"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="Margin" Value="0,0,0,10"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="#474747"/>

                <!-- Control Template with No Hover Effect and Scrollable Dropdown -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Border x:Name="ComboBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="20"
                        Padding="0">
                                <Grid>
                                    <!-- ComboBox Content -->
                                    <ContentPresenter Margin="10,0,30,0"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"/>

                                    <!-- Dropdown Toggle Button -->
                                    <ToggleButton x:Name="ToggleButton"
                                      IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Background="Transparent"
                                      BorderThickness="0"
                                      Style="{StaticResource ComboBoxToggleButton}"/>

                                    <!-- Default Popup for Dropdown -->
                                    <Popup x:Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               PopupAnimation="Slide"
                               Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Border Background="White"
                                    CornerRadius="10"
                                    BorderBrush="Gray"
                                    BorderThickness="1"
                                    MaxHeight="200">
                                            <ScrollViewer VerticalScrollBarVisibility="Auto">
                                                <ItemsPresenter/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SingleDatePickerStyle" TargetType="DatePicker">
                <Setter Property="FontFamily" Value="Lexend"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Visibility" Value="Hidden"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="12"/>
            </Style>

            <Style x:Key="DateButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
            </Style>

            <Style x:Key="DateTextBlockStyle" TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="FontSize" Value="14"/>
            </Style>

            <Style x:Key="OtpBoxStyle" TargetType="TextBox">
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="60"/>
                <Setter Property="FontSize" Value="24"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="FontFamily" Value="{StaticResource Lexend}"/>
                <Setter Property="Background" Value="#EAEAEA"/>
                <Setter Property="BorderThickness" Value="0"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Border Background="{TemplateBinding Background}"
                        BorderBrush="LightGray"
                        BorderThickness="2"
                        CornerRadius="10"
                        Padding="5">
                                <!-- ✅ Use PART_ContentHost to allow text input -->
                                <ScrollViewer x:Name="PART_ContentHost"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <!-- ✅ Improved Focus Effect -->
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="Blue"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="RoundedButtonStyle" TargetType="Button">
                <Setter Property="FontFamily" Value="{StaticResource Lexend}"/>
                <Setter Property="FontSize" Value="14"/>
                <Setter Property="Foreground" Value="#474747"/>
                <Setter Property="Padding" Value="10"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="40"/>
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Margin" Value="0,0,0,10"/>
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="#474747"/>

                <!-- Control Template for the Rounded Button -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="ButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="20"
                    Padding="0">
                                <ContentPresenter HorizontalAlignment="Stretch"
                                      VerticalAlignment="Center"/>
                            </Border>

                            <!-- Visual State for Disabled States -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="#cccccc"/>
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#aaaaaa"/>
                                    <Setter Property="Foreground" Value="#888888"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToggleSwitchStyle" TargetType="ToggleButton">
                <Setter Property="Height" Value="40"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid Height="40">
                                <!-- Background Border -->
                                <Border x:Name="BackgroundBorder" Background="#AEAEAE" CornerRadius="25"/>

                                <!-- Layout Grid with Equal Columns -->
                                <Grid Margin="5" x:Name="ToggleGrid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <!-- Labels for No and Yes -->
                                    <TextBlock x:Name="NoLabel" Text="No" FontSize="14"
                                   Foreground="White" FontWeight="SemiBold"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>

                                    <TextBlock x:Name="YesLabel" Text="Yes" FontSize="14"
                                   Foreground="#555555" FontWeight="Normal"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Grid.Column="1"/>

                                    <!-- Thumb for Switch (Same Width as Column) -->
                                    <Border x:Name="SwitchThumb" Height="30" Background="#F5F5F5"
                                CornerRadius="20" Grid.ColumnSpan="2"
                                HorizontalAlignment="Left">
                                        <Border.Width>
                                            <Binding ElementName="ToggleGrid" Path="ActualWidth">
                                                <Binding.Converter>
                                                    <local2:HalfWidthConverter/>
                                                </Binding.Converter>    
                                            </Binding>
                                        </Border.Width>
                                        <TextBlock x:Name="ThumbText" Text="No" FontSize="14"
                                       FontWeight="Bold" Foreground="#4D4D4D"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Border>
                                </Grid>
                            </Grid>

                            <!-- Animation and State Management -->
                            <ControlTemplate.Triggers>
                                <!-- When Checked -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ThumbText" Property="Text" Value="Yes"/>
                                    <Setter TargetName="YesLabel" Property="Foreground" Value="White"/>
                                    <Setter TargetName="YesLabel" Property="FontWeight" Value="SemiBold"/>
                                    <Setter TargetName="NoLabel" Property="Foreground" Value="#FDFDFD"/>
                                    <Setter TargetName="NoLabel" Property="FontWeight" Value="Normal"/>

                                    <!-- Slide Thumb to the Right -->
                                    <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Right"/>
                                </Trigger>

                                <!-- When Unchecked -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="ThumbText" Property="Text" Value="No"/>
                                    <Setter TargetName="NoLabel" Property="Foreground" Value="White"/>
                                    <Setter TargetName="NoLabel" Property="FontWeight" Value="SemiBold"/>
                                    <Setter TargetName="YesLabel" Property="Foreground" Value="#FDFDFD"/>
                                    <Setter TargetName="YesLabel" Property="FontWeight" Value="Normal"/>

                                    <!-- Slide Thumb to the Left -->
                                    <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Left"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToggleSwitchCreateInvoiceCostEstimate" TargetType="ToggleButton">
                <Setter Property="Height" Value="40"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Grid Height="40">
                                <!-- Background Border -->
                                <Border x:Name="BackgroundBorder" Background="#AEAEAE" CornerRadius="10"/>

                                <!-- Layout Grid with Equal Columns -->
                                <Grid Margin="0" x:Name="ToggleGrid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <!-- Labels for No and Yes -->
                                    <TextBlock x:Name="NoLabel" Text="Create Invoice" FontSize="14"
                                   Foreground="#555555" FontWeight="SemiBold"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>

                                    <TextBlock x:Name="YesLabel" Text="Cost Estimate" FontSize="14"
                                   Foreground="#555555" FontWeight="Normal"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Grid.Column="1"/>

                                    <!-- Thumb for Switch (Same Width as Column) -->
                                    <Border x:Name="SwitchThumb" Height="Auto" Background="#555555"
                                CornerRadius="10" Grid.ColumnSpan="2"
                                HorizontalAlignment="Left">
                                        <Border.Width>
                                            <Binding ElementName="ToggleGrid" Path="ActualWidth">
                                                <Binding.Converter>
                                                    <local2:HalfWidthConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </Border.Width>
                                        <TextBlock x:Name="ThumbText" Text="Create Invoice" FontSize="14"
                                       FontWeight="Bold" Foreground="#FDFDFD"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    </Border>
                                </Grid>
                            </Grid>

                            <!-- Animation and State Management -->
                            <ControlTemplate.Triggers>
                                <!-- When Checked -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="ThumbText" Property="Text" Value="Cost Etsimate"/>
                                    <Setter TargetName="YesLabel" Property="Foreground" Value="White"/>
                                    <Setter TargetName="YesLabel" Property="FontWeight" Value="SemiBold"/>
                                    <Setter TargetName="NoLabel" Property="Foreground" Value="#555555"/>
                                    <Setter TargetName="NoLabel" Property="FontWeight" Value="Normal"/>

                                    <!-- Slide Thumb to the Right -->
                                    <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Right"/>
                                </Trigger>

                                <!-- When Unchecked -->
                                <Trigger Property="IsChecked" Value="False">
                                    <Setter TargetName="ThumbText" Property="Text" Value="Create Invoice"/>
                                    <Setter TargetName="NoLabel" Property="Foreground" Value="White"/>
                                    <Setter TargetName="NoLabel" Property="FontWeight" Value="SemiBold"/>
                                    <Setter TargetName="YesLabel" Property="Foreground" Value="#555555"/>
                                    <Setter TargetName="YesLabel" Property="FontWeight" Value="Normal"/>

                                    <!-- Slide Thumb to the Left -->
                                    <Setter TargetName="SwitchThumb" Property="HorizontalAlignment" Value="Left"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Scroll Styles -->
            <Style x:Key="ModernScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <!-- Content area -->
                                <ScrollContentPresenter Grid.Column="0" Grid.Row="0"/>

                                <!-- Vertical ScrollBar -->
                                <ScrollBar x:Name="PART_VerticalScrollBar"
                               Grid.Column="1" Grid.Row="0"
                               Value="{TemplateBinding VerticalOffset}"
                               Maximum="{TemplateBinding ScrollableHeight}"
                               ViewportSize="{TemplateBinding ViewportHeight}"
                               Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                    <ScrollBar.Style>
                                        <Style TargetType="{x:Type ScrollBar}">
                                            <Setter Property="Width" Value="8"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                        <Grid Background="{TemplateBinding Background}">
                                                            <Track x:Name="PART_Track" IsDirectionReversed="True">
                                                                <Track.DecreaseRepeatButton>
                                                                    <RepeatButton Command="ScrollBar.PageUpCommand" Opacity="0"/>
                                                                </Track.DecreaseRepeatButton>
                                                                <Track.IncreaseRepeatButton>
                                                                    <RepeatButton Command="ScrollBar.PageDownCommand" Opacity="0"/>
                                                                </Track.IncreaseRepeatButton>
                                                                <Track.Thumb>
                                                                    <Thumb>
                                                                        <Thumb.Template>
                                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                                <Border CornerRadius="4" 
                                                                            Background="#444444"/>
                                                                            </ControlTemplate>
                                                                        </Thumb.Template>
                                                                    </Thumb>
                                                                </Track.Thumb>
                                                            </Track>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="PART_Track" Property="Opacity" Value="1"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="False">
                                                                <Setter TargetName="PART_Track" Property="Opacity" Value="0.5"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ScrollBar.Style>
                                </ScrollBar>

                                <!-- Horizontal ScrollBar (hidden in this example to match image) -->
                                <ScrollBar x:Name="PART_HorizontalScrollBar"
                               Grid.Column="0" Grid.Row="1"
                               Orientation="Horizontal"
                               Value="{TemplateBinding HorizontalOffset}"
                               Maximum="{TemplateBinding ScrollableWidth}"
                               ViewportSize="{TemplateBinding ViewportWidth}"
                               Visibility="Collapsed"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Fade transition template -->
            <ControlTemplate x:Key="FadeTransitionTemplate">
                <Grid>
                    <ContentPresenter x:Name="OldContent" Content="{Binding PreviousView}" Opacity="1">
                        <ContentPresenter.RenderTransform>
                            <TranslateTransform X="0" Y="0" />
                        </ContentPresenter.RenderTransform>
                    </ContentPresenter>
                    <ContentPresenter x:Name="NewContent" Content="{Binding CurrentView}" Opacity="0">
                        <ContentPresenter.RenderTransform>
                            <TranslateTransform X="0" Y="0" />
                        </ContentPresenter.RenderTransform>
                    </ContentPresenter>
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger RoutedEvent="ContentControl.Loaded">
                        <BeginStoryboard>
                            <Storyboard>
                                <!-- Fade out old content -->
                                <DoubleAnimation Storyboard.TargetName="OldContent" 
                                                 Storyboard.TargetProperty="Opacity"
                                                 From="1" To="0" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <QuadraticEase EasingMode="EaseInOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>

                                <!-- Fade in new content -->
                                <DoubleAnimation Storyboard.TargetName="NewContent" 
                                                 Storyboard.TargetProperty="Opacity"
                                                 From="0" To="1" Duration="0:0:0.3">
                                    <DoubleAnimation.EasingFunction>
                                        <QuadraticEase EasingMode="EaseInOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <!-- Create style for ContentControl with transition -->
            <Style x:Key="FadeTransitionContentControl" TargetType="ContentControl">
                <Setter Property="Template" Value="{StaticResource FadeTransitionTemplate}" />
            </Style>

            <!-- ProgressBar Style -->
            <Style x:Key="AnimatedMonochromeProgressBarStyle" TargetType="{x:Type ProgressBar}">
                <Setter Property="Background" Value="#333333"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Height" Value="4"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid x:Name="Root">
                                <!-- Background Track -->
                                <Rectangle x:Name="PART_Track" 
                                   Fill="{TemplateBinding Background}"
                                   RadiusX="2" RadiusY="2"/>

                                <!-- Progress Indicator -->
                                <Rectangle x:Name="PART_Indicator" 
                                   Fill="{TemplateBinding Foreground}"
                                   RadiusX="2" RadiusY="2"
                                   HorizontalAlignment="Left"/>

                                <!-- Animated dots for indeterminate state -->
                                <Canvas x:Name="IndeterminateRoot" Visibility="Collapsed" ClipToBounds="True">
                                    <Rectangle x:Name="Dot1" Fill="White" Width="20" Height="4" RadiusX="2" RadiusY="2"/>
                                    <Rectangle x:Name="Dot2" Fill="White" Width="20" Height="4" RadiusX="2" RadiusY="2"/>
                                </Canvas>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsIndeterminate" Value="True">
                                    <Setter TargetName="PART_Indicator" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="IndeterminateRoot" Property="Visibility" Value="Visible"/>

                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard RepeatBehavior="Forever">
                                                <!-- Animation for first dot -->
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Dot1" Storyboard.TargetProperty="(Canvas.Left)">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0" Value="-20"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="200">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseInOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>

                                                <!-- Animation for second dot (delayed start) -->
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Dot2" Storyboard.TargetProperty="(Canvas.Left)">
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="-20"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:1.75" Value="200">
                                                        <EasingDoubleKeyFrame.EasingFunction>
                                                            <QuadraticEase EasingMode="EaseInOut"/>
                                                        </EasingDoubleKeyFrame.EasingFunction>
                                                    </EasingDoubleKeyFrame>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Pagination Styles -->
            <Style x:Key="PaginationStyle">
                <Setter Property="Control.Margin" Value="3,0" />
                <Setter Property="Control.FontFamily" Value="Lexend" />
                <Setter Property="Control.FontSize" Value="14" />
            </Style>

            <Style x:Key="PaginationButtonStyle" TargetType="Button" BasedOn="{StaticResource PaginationStyle}">
                <Setter Property="Width" Value="35" />
                <Setter Property="Height" Value="35" />
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="#474747" />
                <Setter Property="BorderBrush" Value="#DDDDDD" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="17.5">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="PaginationCurrentPageButtonStyle" TargetType="Button" BasedOn="{StaticResource PaginationButtonStyle}">
                <Setter Property="Background" Value="#474747" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="BorderBrush" Value="#474747" />
                <Setter Property="FontWeight" Value="SemiBold" />
            </Style>

            <Style x:Key="PaginationNavButtonStyle" TargetType="Button" BasedOn="{StaticResource PaginationButtonStyle}">
                <Setter Property="Width" Value="40" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="#CCCCCC" />
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
